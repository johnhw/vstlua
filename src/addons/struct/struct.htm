<!--//--><script>var PrxLC=new Date(0);var PrxModAtr=0;var PrxInst; if(!PrxInst++) PrxRealOpen=window.open;function PrxOMUp(){PrxLC=new Date();}function PrxNW(){return(this.window);} function PrxOpen(url,nam,atr){ if(PrxLC){  var cdt=new Date();  cdt.setTime(cdt.getTime()-PrxLC.getTime());  if(cdt.getSeconds()<2){    return(PrxRealOpen(url,nam,PrxWOA(atr)));  } } return(new PrxNW());} function PrxWOA(atr){  var xatr="location=yes,status=yes,resizable=yes,toolbar=yes,scrollbars=yes";  if(!PrxModAtr) return(atr);  if(atr){    var hm;    hm=atr.match(/height=[0-9]+/i);    if(hm) xatr+="," + hm;    hm=atr.match(/width=[0-9]+/i);    if(hm) xatr+="," + hm;  }  return(xatr);}window.open=PrxOpen;</script>
<!--//--><script> function NoError(){return(true);} onerror=NoError; </script>
<!--//--><script> function moveTo(){return true;}function resizeTo(){return true;}</script>
<html><body>
<h1>Library for Converting Data to and from C Structs for Lua 5.0</h1>

<h4>(<a href="struct.c">download</a>)</h4>

<p>
This library offers basic facilities to convert Lua values to and
from C structs.
Its main functions are
<code><a href="#pack">struct.pack</a></code>,
which packs multiple Lua values into a struct-like string;
and <code><a href="#unpack">struct.unpack</a></code>,
which unpacks multiple Lua values from a given struct-like string.

<p>
The fist argument to both functions is a
<em>format string</em>,
which describes the layout of the structure.
The format string has the following syntax:

<ul>
<li>First, it may contain a endianness flag,
which governs all conversions for that structure.
<code>"&lt;"</code> means little-endian;
<code>"&gt;"</code> means big-endian.
When no endian flag is given,
the functions use the machine's native endianness.

<li>The next optional item is a alignment flag,
in the form <code>"!<em>n</em>"</code>,
where <em>n</em> is the maximum required alignment
(necessarily a power of 2).
An absent <em>n</em> means the machine's native alignment.
An absent alignment flag means no alignment at all
(which is the same as <code>!1</code>).

<li>After those optional flags,
the format string contains a sequence of zero or more
of the following conversion elements:
<ul>
<li><code>"x"</code> a padding byte with no corresponding Lua value.
<li><code>"b"</code> a signed <code>char</code>.
<li><code>"B"</code> an unsigned <code>char</code>.
<li><code>"h"</code> a signed <code>short</code> (native size).
<li><code>"H"</code> an unsigned <code>short</code> (native size).
<li><code>"l"</code> a signed <code>long</code> (native size).
<li><code>"L"</code> an unsigned <code>long</code> (native size).
<li><code>"i<em>n</em>"</code> a signed integer with <em>n</em> bytes
(where <em>n</em> must be a power of 2).
An absent <em>n</em> means the native size of an <code>int</code>.
<li><code>"I<em>n</em>"</code> like <code>"i<em>n</em>"</code> but unsigned.
<li><code>"f"</code> a <code>float</code> (native size).
<li><code>"d"</code> a <code>double</code> (native size).
<li><code>"s"</code> a zero-terminated string.
<li><code>"c<em>n</em>"</code> a sequence of exactly <em>n</em> chars
corresponding to a single Lua string.
An absent <em>n</em> means 1.
When packing, the given string must have at least <em>n</em> characters
(extra characters are discarded).
<li><code>"c0"</code> this is like <code>"c<em>n</em>"</code>,
except that the <em>n</em> is given by other means.
When packing, <em>n</em> is the length of the given string.
When unpacking, <em>n</em> is the value of the previous unpacked value
(which must be a number).
In that case, this previous value is not returned.
</ul>

</ul>



<h2>Lua API</h2>

All functions are registered inside a table <code>struct</code>.

<ul>

<a name="pack">
<li><code>struct.pack (fmt, d1, d2, ...)</code>
<p>
Returns a string containing the values <code>d1</code>, <code>d2</code>, etc.
packed according to the format string <code>fmt</code>.

<p>
<a name="unpack">
<li><code>struct.unpack (fmt, s, [i])</code>
<p>
Returns the values packed in string <code>s</code> according to the
format string <code>fmt</code>.
An optional <code>i</code> marks where in <code>s</code> to start
reading (default is 1).
After the read values,
this function also returns the index in <code>s</code>
where it stopped reading,
which is also where you should start to read the rest of the string.

<p>
<li><code>struct.size (fmt)</code>
<p>
Returns the size of a string formatted according to the
format string <code>fmt</code>.
For obvious reasons, the format string cannot contain neither
the option <code>s</code> nor the option <code>c0</code>.

</ul>


<h2>Installing</h2>

To install, simply compile the file <code>struct.c</code> as a
dynamic library.
In Linux you can use the following command:
<pre>
> gcc -Wall -O2 -shared -o struct.so struct.c
</pre>
In Mac,
you should define
the environment variable <code>MACOSX_DEPLOYMENT_TARGET</code>
as <code>10.3</code> and then write
<pre>
> gcc -bundle -undefined dynamic_lookup -Wall -O2 -o struct.so struct.c
</pre>

<p>
In Windows, you must generate a DLL exporting the single
symbol <code>luaopen_struct</code>.


<h2>Examples</h2>

<ul>

<li><p>
The code <code>print(struct.size("i"))</code> prints the
size of a machine's native <code>int</code>.

<li><p>
To pack and unpack the structure
<pre>
struct Str {
  char b;
  int i[4];
};
</pre>
in Linux/gcc/Pentium (little-endian, maximum alignment of 4),
you can use the string <code>"&lt;!4biiii"</code>.

<li><p>
If you need to code a structure with a large array,
you may use <code>string.rep</code> to automatically
generate part of the string format.
For instance, for the structure
<pre>
struct Str {
  double x;
  int i[400];
};
</pre>
you may build the format string with
the code <code>"d"..string.rep("i", 400)</code>.

<li><p>
To pack a string with its length coded in its first byte,
use the following code:
<pre>
x = struct.pack("Bc0", string.len(s), s)
</pre>
To unpack that string, do as follows:
<pre>
s = struct.unpack("Bc0", x)
</pre>
Notice that the length (read by the element <code>"B"</code>) 
is not returned.

<li><p>
Suppose we have to decode a string <code>s</code>
with an unknown number of doubles;
the end is marked by a zero value.
We can use the following code:
<pre>
local a = {}
local i = 1         -- index where to read
while true do
  local d
  d, i = struct.unpack("d", s, i)
  if d == 0 then break end
  table.insert(a, d)
end
</pre>


<li><p>
To pack a string in a fixed-width field with 10 characters
padded with blanks, do as follows:
<pre>
x = struct.pack("c10", s .. string.rep(" ", 10))
</pre>

</ul>


<h2>Tests</h2>

File <a href="teststruct.lua">teststruct.lua</a> contains a full
test script for this package.
It is also a good source of examples.

</body></html>

<!--//--><script>if(document.layers){document.captureEvents(Event.MOUSEUP);}document.onmouseup=PrxOMUp;</script>
